blueprint:
  name: Enhanced Playlist Control for PiSignage Media Players
  description: Control playlists on PiSignage media players with flexible options - use scheduled changes or manual triggers, and set either one playlist for all players or different playlists per player.
  domain: automation
  input:
    media_players:
      name: Media Players
      description: Select the PiSignage players to control
      selector:
        entity:
          multiple: true
          filter:
            - integration: pisignage
              domain: media_player
    playlist_mode:
      name: Playlist Selection Mode
      description: Choose whether to set the same playlist for all players or different playlists for each player
      default: single
      selector:
        select:
          options:
            - label: "Same playlist for all players"
              value: single
            - label: "Different playlist for each player"
              value: multiple
    player_playlists:
      name: Player Playlists
      description: "For single mode: First playlist will be used for all players. For multiple mode: Enter playlists in the SAME ORDER as your players above."
      selector:
        text:
          multiple: true
      default: []
    enable_schedule:
      name: Enable Scheduling
      description: Turn on scheduling (if off, the automation can only be triggered manually)
      default: true
      selector:
        boolean:
    time:
      name: Schedule Time
      description: Time to change the playlist (only used when scheduling is enabled)
      default: "07:00:00"
      selector:
        time:
    days_of_week:
      name: Schedule Days
      description: Days to run this automation (leave empty for every day)
      default: []
      selector:
        select:
          options:
            - label: Monday
              value: mon
            - label: Tuesday
              value: tue
            - label: Wednesday
              value: wed
            - label: Thursday
              value: thu
            - label: Friday
              value: fri
            - label: Saturday
              value: sat
            - label: Sunday
              value: sun
          multiple: true

mode: single

variables:
  playlist_mode: !input playlist_mode
  player_playlists: !input player_playlists
  days_of_week: !input days_of_week
  enable_schedule: !input enable_schedule
  media_players: !input media_players

trigger:
  - platform: template
    id: manual_trigger
    value_template: "{{ false }}"
  - platform: time
    id: time_trigger
    at: !input time
    enabled: !input enable_schedule

condition:
  - condition: or
    conditions:
      - condition: trigger
        id: manual_trigger
      - condition: and
        conditions:
          - condition: trigger
            id: time_trigger
          - condition: template
            value_template: >
              {{ true if not days_of_week else now().strftime('%a')|lower in days_of_week }}

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ playlist_mode == 'single' }}"

        sequence:
          - condition: template
            value_template: "{{ player_playlists is defined and player_playlists|length > 0 and player_playlists[0]|trim != '' }}"

          - repeat:
              for_each: "{{ media_players }}"
              sequence:
                - if:
                    - condition: template
                      value_template: "{{ is_state(repeat.item, 'off') }}"

                  then:
                    - service: media_player.turn_on
                      target:
                        entity_id: "{{ repeat.item }}"

                - service: media_player.select_source
                  data:
                    source: "{{ player_playlists[0] }}"

                  target:
                    entity_id: "{{ repeat.item }}"

      - conditions:
          - condition: template
            value_template: "{{ playlist_mode == 'multiple' }}"

        sequence:
          - variables:
              player_config: >
                {% set config = namespace(data={}) %}
                {% for i in range(0, media_players|length) %}
                  {% if i < player_playlists|length and player_playlists[i]|trim != '' %}
                    {% set config.data = dict(config.data) %}
                    {% set config.data = dict(config.data, **{media_players[i]: player_playlists[i]}) %}
                  {% endif %}
                {% endfor %}
                {{ config.data }}
          - repeat:
              for_each: "{{ media_players }}"
              sequence:
                - if:
                    - condition: template
                      value_template: "{{ repeat.item in player_config }}"
                  then:
                    - if:
                        - condition: template
                          value_template: "{{ is_state(repeat.item, 'off') }}"
                      then:
                        - service: media_player.turn_on
                          target:
                            entity_id: "{{ repeat.item }}"
                    - service: media_player.select_source
                      data:
                        source: "{{ player_config[repeat.item] }}"
                      target:
                        entity_id: "{{ repeat.item }}"